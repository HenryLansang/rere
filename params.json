{"name":"rere","tagline":"regex redone","body":"# rere: regex redone\r\n\r\n```python\r\nfrom rere import *\r\n\r\nmoney_regex = Exactly('$') + Digit*2 + (Exactly('.') + Digit*2).zero_or_one\r\n\r\nregex.match('$23.95') # ==> True\r\n```\r\n\r\nIsn't this better than `regex.compile('\\\\$\\\\d\\\\d(\\\\.\\\\d\\\\d)?')`?\r\n\r\n## Installation\r\n\r\nRun the following command to install:\r\n\r\n    pip install rere\r\n\r\nThis may require root (`sudo`).\r\n\r\nPython 2.7+ and 3.3+ are supported.\r\n\r\n## Usage\r\n\r\nTo get started using `rere`, you need to know the logic of the regular\r\nexpression pattern that you wish to build. To learn more about regular\r\nexpressions and their usage, please visit [Wikipedia: Regular\r\nExpression](http://en.wikipedia.org/wiki/Regular_expression).\r\n\r\nOnce you know what sort of pattern you wish to match strings against, you can\r\nuse `rere` to automatically generate the string patterns that you wish to use.\r\nAdditionally, there is functionality built in to `rere` to call Python's\r\nbuilt-in `re` library to do the matching for you (`match()` or\r\n`match\\_prefix`).\r\n\r\nSee above for the example.\r\n\r\n## API\r\n\r\n### Regex Components\r\n\r\nThe following components can be used individually, or added together (with `+`)\r\ncreate compound regexes.\r\n\r\n#### `Exactly`\r\n\r\n```python\r\nExactly(string)\r\n```\r\n\r\n-   `string`: the string that is exactly what you want to match against\r\n\r\nUse exactly to describe a part of a regex that you wish to be the exact\r\nstring of your choosing.\r\n\r\nFor example, if you want to match for the exact string, 'cat',\r\n\r\n```python\r\nregex = Exactly('cat')\r\nregex.match('cat') # ==> True\r\nregex.match('Cat') # ==> False\r\nregex.prefix_match('catapult') # ==> True\r\nregex.prefix_match('bobcat') # ==> False\r\n```\r\n\r\n`Exactly` takes care of any required escaping, so you can do things like: \r\n\r\n```python\r\nregex = Exactly('$2.00\\n')\r\nregex.match('$2.00\\n') # ==> True\r\n````\r\n\r\n(If you had to write a raw regex for the above, it might look something\r\nlike `re.compile('\\\\$2\\\\.00\\\\\\n')`. Ew.)\r\n\r\n#### `AnyChar`\r\n\r\n```python\r\nAnyChar\r\n```\r\n\r\nUse `AnyChar` when you want to match any single character (special or\r\notherwise, including newlines). \r\n\r\n```python\r\nregex = Exactly('hello') + AnyChar\r\nregex.match('hello!') # ==> True\r\nregex.match('hello1') # ==> True\r\nregex.match('hello!!') # ==> False\r\nregex.match('hello\\n') # ==> True\r\n```\r\n\r\n#### `Digit`\r\n\r\n```python\r\nDigit\r\n```\r\n\r\nUse `Digit` when you want to match any single digit (from 0 to 9).\r\n\r\n```python\r\nregex = Exactly('hello') + Digit\r\nregex.match('hello!') # ==> False \r\nregex.match('hello1') # ==> True\r\nregex.match('hello09') # ==> False \r\n```\r\n\r\n#### `Letter`\r\n\r\n```python\r\nLetter\r\n```\r\n\r\nUse `Letter` when you want to match any English letter (case insensitive). \r\n\r\n```python\r\nregex = Exactly('hello') + Letter \r\nregex.match('helloB') # ==> True \r\nregex.match('hellob') # ==> True\r\nregex.match('hello9') # ==> False \r\nregex.match('hello\\n') # ==> False\r\nregex.match('helloBb') # ==> False\r\n```\r\n#### `Whitespace`\r\n\r\n```python\r\nWhitespace\r\n```\r\n\r\nUse `Whitespace` when you want to match whitespace (`[ \\t\\n\\r\\f\\v]`).\r\n\r\n```python\r\nregex = Exactly('hi') + Whitespace\r\nregex.match('hi ') # ==> True\r\nregex.match('hi\\n') # ==> True\r\nregex.match('hi b') # ==> False\r\n```\r\n\r\n#### `Anything`\r\n\r\n```python\r\nAnything\r\n```\r\n\r\nUse `Anything` when you want to match absolutely anything (special or\r\notherwise, including newlines). The empty string will also be matched.\r\n\r\n```python\r\nregex = Exactly('hello') + Anything\r\nregex.match('hello!') # ==> True\r\nregex.match('hello!!') # ==> True \r\nregex.match('hello\\n') # ==> True\r\nregex.match('Hellohello') #==> False\r\n```\r\n\r\n#### `RawRegex`\r\n\r\n```python\r\nRawRegex(pattern)\r\n```\r\n\r\n-   `pattern`: a string containing a raw regex (using the syntax from `re`)\r\n\r\nSimply match the provided regular expression. This allows you to use legacy\r\nregexes within `rere` expressions.\r\n\r\nFor example, if you have an existing regex for phone numbers (like\r\n`r\"\\(\\d\\d\\d\\) \\d\\d\\d-\\d\\d\\d\\d\"`), and you want to match one or more of\r\nthem:\r\n\r\n```python\r\nregex = RawRegex(r\"\\(\\d\\d\\d\\) \\d\\d\\d-\\d\\d\\d\\d\").one_or_more\r\n```\r\n\r\n### Combining Components\r\n\r\nAll regex components implement several common functions. They can be combined\r\nand nested in many ways, such as:\r\n\r\n```python\r\nregex = (Exactly('cat') + Exactly('dog').zero_or_one).one_or_more\r\nregex.match('catcatdogcatdogcatdog') # ==> True\r\nregex.match('catdogdog') # ==> False\r\n```\r\n\r\n#### `regex.zero_or_one`\r\n\r\nUse the `zero_or_one` property to describe how many repetitions of a string are\r\nrequired to match the pattern, in this case, only zero or one.\r\n\r\n```python\r\nregex = Exactly('ab').zero_or_one\r\nregex.match('aba') # ==> False\r\nregex.match('ab') # ==> True\r\nregex.match('') # ==> True\r\n```\r\n\r\n#### `regex.zero_or_more`\r\n\r\nUse the `zero_or_more` property to describe how many repetitions of a string are\r\nrequired to match the pattern, in this case, any number (zero or more).\r\n\r\n```python\r\nregex = Exactly('ab').zero_or_more \r\nregex.match('ababab') # ==> True\r\nregex.match('ab') # ==> True\r\nregex.match('') # ==> True\r\nregex.match('aba') # ==> False \r\n```\r\n\r\n#### `regex.one_or_more`\r\n\r\nUse the `one_or_more` function to describe how many repetitions of a string are\r\nrequired to match the pattern, in this case, at least one.\r\n\r\n```python\r\nregex = Exactly('ab').one_or_more \r\nregex.match('ababab') # ==> True\r\nregex.match('ab') # ==> True\r\nregex.match('') # ==> False\r\nregex.match('aba') # ==> False \r\n```\r\n\r\n#### Addition (`+`)\r\n\r\nYou can form a regex from separate parts and combine them together with the\r\n`+` sign.\r\n\r\n```python\r\nregex = Exactly('cat') + Exactly('dog')\r\nregex.match('catdog') # ==> True\r\n```\r\n\r\n#### Multiplication (`*`)\r\n\r\nIf you want a part (or a full) regex to be repeated a specified number of times,\r\nuse the `*` sign.\r\n\r\n```python\r\nregex = Exactly('cat') * 2\r\nregex.match('catcat') # ==> True\r\n```\r\n\r\n#### Or (`|`)\r\n\r\nIf need \"Either or\" logic for your regex, use `|`.\r\n\r\n```python\r\nregex = Exactly('cat') | Exactly('dog')\r\nregex.match('cat') # ==> True\r\nregex.match('dog') # ==> True\r\nregex.match('fish') # ==> False\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}